{"version":3,"sources":["../src/Parser.js"],"names":[],"mappings":"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C,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAA;AAC7C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC9C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;AAC/C,SAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,E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","file":"Parser.js","sourcesContent":["/**\n * Parser in ECMAScript 6\n *\n * @copyright Copyright (c) 2012 SegmentFault Team. (http://segmentfault.com)\n * @author Integ <integ@segmentfault.com>\n * @license BSD License\n */\n\nimport _ from 'lodash'\n\n/**\n * Generator 遍历json\n */\n\nfunction* entries(obj) {\n    for (let key of Object.keys(obj)) {\n        yield [key, obj[key]];\n    }\n}\n\n/**\n * md5\n * discuss at: http://phpjs.org/functions/md5/\n * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n * improved by: Michael White (http://getsprink.com)\n * improved by: Jack\n * improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n * input by: Brett Zamir (http://brett-zamir.me)\n * bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n * depends on: utf8_encode\n * example 1: md5('Kevin van Zonneveld')\n * returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'\n */\nfunction md5(str) {\n  var xl\n\n  var rotateLeft = function(lValue, iShiftBits) {\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))\n  }\n\n  var addUnsigned = function(lX, lY) {\n    var lX4, lY4, lX8, lY8, lResult\n    lX8 = (lX & 0x80000000)\n    lY8 = (lY & 0x80000000)\n    lX4 = (lX & 0x40000000)\n    lY4 = (lY & 0x40000000)\n    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF)\n    if (lX4 & lY4) {\n      return (lResult ^ 0x80000000 ^ lX8 ^ lY8)\n    }\n    if (lX4 | lY4) {\n      if (lResult & 0x40000000) {\n        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8)\n      } else {\n        return (lResult ^ 0x40000000 ^ lX8 ^ lY8)\n      }\n    } else {\n      return (lResult ^ lX8 ^ lY8)\n    }\n  }\n\n  var _F = function(x, y, z) {\n    return (x & y) | ((~x) & z)\n  }\n  var _G = function(x, y, z) {\n    return (x & z) | (y & (~z))\n  }\n  var _H = function(x, y, z) {\n    return (x ^ y ^ z)\n  }\n  var _I = function(x, y, z) {\n    return (y ^ (x | (~z)))\n  }\n\n  var _FF = function(a, b, c, d, x, s, ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac))\n    return addUnsigned(rotateLeft(a, s), b)\n  }\n\n  var _GG = function(a, b, c, d, x, s, ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac))\n    return addUnsigned(rotateLeft(a, s), b)\n  }\n\n  var _HH = function(a, b, c, d, x, s, ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac))\n    return addUnsigned(rotateLeft(a, s), b)\n  }\n\n  var _II = function(a, b, c, d, x, s, ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac))\n    return addUnsigned(rotateLeft(a, s), b)\n  }\n\n  var convertToWordArray = function(str) {\n    var lWordCount\n    var lMessageLength = str.length\n    var lNumberOfWords_temp1 = lMessageLength + 8\n    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64\n    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16\n    var lWordArray = new Array(lNumberOfWords - 1)\n    var lBytePosition = 0\n    var lByteCount = 0\n    while (lByteCount < lMessageLength) {\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4\n      lBytePosition = (lByteCount % 4) * 8\n      lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition))\n      lByteCount++\n    }\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4\n    lBytePosition = (lByteCount % 4) * 8\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition)\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29\n    return lWordArray\n  }\n\n  var wordToHex = function(lValue) {\n    var wordToHexValue = '',\n      wordToHexValue_temp = '',\n      lByte, lCount\n    for (lCount = 0; lCount += 3; lCount++) {\n      lByte = (lValue >>> (lCount * 8)) & 255\n      wordToHexValue_temp = '0' + lByte.toString(16)\n      wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2)\n    }\n    return wordToHexValue\n  }\n\n  var x = [],\n    k, AA, BB, CC, DD, a, b, c, d, S11 = 7,\n    S12 = 12,\n    S13 = 17,\n    S14 = 22,\n    S21 = 5,\n    S22 = 9,\n    S23 = 14,\n    S24 = 20,\n    S31 = 4,\n    S32 = 11,\n    S33 = 16,\n    S34 = 23,\n    S41 = 6,\n    S42 = 10,\n    S43 = 15,\n    S44 = 21\n\n  str = this.utf8_encode(str)\n  x = convertToWordArray(str)\n  a = 0x67452301\n  b = 0xEFCDAB89\n  c = 0x98BADCFE\n  d = 0x10325476\n\n  xl = x.length\n  for (k = 0; k < xl; k += 16) {\n    AA = a\n    BB = b\n    CC = c\n    DD = d\n    a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478)\n    d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756)\n    c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB)\n    b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE)\n    a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF)\n    d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A)\n    c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613)\n    b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501)\n    a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8)\n    d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF)\n    c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1)\n    b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE)\n    a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122)\n    d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193)\n    c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E)\n    b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821)\n    a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562)\n    d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340)\n    c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51)\n    b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA)\n    a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D)\n    d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453)\n    c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681)\n    b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8)\n    a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6)\n    d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6)\n    c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87)\n    b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED)\n    a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905)\n    d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8)\n    c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9)\n    b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A)\n    a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942)\n    d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681)\n    c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122)\n    b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C)\n    a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44)\n    d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9)\n    c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60)\n    b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70)\n    a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6)\n    d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA)\n    c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085)\n    b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05)\n    a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039)\n    d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5)\n    c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8)\n    b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665)\n    a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244)\n    d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97)\n    c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7)\n    b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039)\n    a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3)\n    d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92)\n    c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D)\n    b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1)\n    a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F)\n    d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0)\n    c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314)\n    b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1)\n    a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82)\n    d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235)\n    c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB)\n    b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391)\n    a = addUnsigned(a, AA)\n    b = addUnsigned(b, BB)\n    c = addUnsigned(c, CC)\n    d = addUnsigned(d, DD)\n  }\n\n  var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d)\n\n  return temp.toLowerCase()\n}\n\n\nexport default class Parser {\n    constractor () {\n        this.commonWhiteList = 'kbd|b|i|strong|em|sup|sub|br|code|del|a|hr|small'\n        this.specialWhiteList = {\n            table:  'table|tbody|thead|tfoot|tr|td|th'\n        }\n        this.footnotes = []\n        this.blocks = []\n        this.current = 'normal'\n        this.pos = -1\n        this.definitions = []\n        this.hooks = {}\n    }\n\n    /**\n     * makeHtml\n     *\n     * @param mixed text\n     * @return string\n     */\n    makeHtml (text) {\n        let html = this.parser(text)\n        return this.makeFootnotes(html)\n    }\n\n    /**\n     * @param type\n     * @param callback\n     */\n    hook (type, callback) {\n        this.hooks[type] = callback\n    }\n\n    /**\n     * @param html\n     * @return string\n     */\n    static makeFootnotes (html) {\n        if (this.footnotes.length > 0) {\n            html += '<div class=\"footnotes\"><hr><ol>'\n            let index = 1\n            let val = this.footnotes.pop()\n            while (val) {\n                if (typeof val === 'string') {\n                    val += ` <a href=\"#fnref-${index}\" class=\"footnote-backref\">&#8617;</a>`\n                } else {\n                    val[val.length - 1] += ` <a href=\"#fnref-${index}\" class=\"footnote-backref\">&#8617;</a>`\n                    val = val.length > 1 ? this.parse(val.join(\"\\n\")) : this.parseInline(val[0])\n                }\n\n                html += `<li id=\"fn-${index}\">${val}</li>`\n\n                index++\n            }\n            html += '</ol></div>'\n        }\n        return html\n    }\n\n    /**\n     * parse\n     *\n     * @param string text\n     * @return string\n     */\n    static parse (text) {\n        let blocks = this.parseBlock(text, lines)\n        let html = ''\n\n        blocks.forEach (block => {\n            let [type, start, end, value] = block\n            let extract = lines.slice(start, end - start + 1)\n            let method = 'parse' + _.capitalize(type)\n\n            extract = this.call('before' + _.capitalize(method), extract, value)\n            let result = this[method](extract, value)\n            result = this.call('after' + _.capitalize(method), result, value)\n\n            html += result\n        })\n\n        return html\n    }\n\n    /**\n     * @param type\n     * @param value\n     * @return mixed\n     */\n    static call (type, ...value) {\n        if (!this.hooks[type]) {\n            return value[0]\n        }\n\n        let args = value\n\n        this.hooks[type].forEach (callback => {\n            value = callback(args)\n            args[0] = value\n        })\n\n        return value[0]\n    }\n\n    /**\n     * parseInline\n     *\n     * @param string text\n     * @param string whiteList\n     * @return string\n     */\n    static parseInline (text, whiteList = '') {\n        let id = 0\n        let uniqid = md5((new Date()).getTime())\n        let codes = []\n\n        text = this.call('beforeParseInline', text)\n\n        // code\n        let codeMatches = /(^|[^\\\\])`(.+?)`/.exec(text)\n        if (codeMatches) {\n            let key = '|' + uniqid + id + '|'\n            codes[key] = '<code>' + htmlspecialchars(codeMatches[2]) + '</code>'\n            id ++\n            text = codeMatches[1] + key\n        }\n\n        // escape unsafe tags\n        let unsafeTagMatches = /<(\\/?)([a-z0-9-]+)(\\s+[^>]*)?>/i.exec(text)\n        if (unsafeTagMatches) {\n            let whiteLists = this.commonWhiteList + '|' + whiteList\n            if (whiteLists.toLowerCase().indexOf(unsafeTagMatches[2].toLowerCase()) !== -1) {\n                return unsafeTagMatches[0]\n            } else {\n                return htmlspecialchars(unsafeTagMatches[0])\n            }\n        }\n\n        // footnote\n        let footnotePattern = new RegExp(\"\\[\\^((?:[^\\]]|\\\\]|\\\\[)+?)\\]\")\n        let footnoteMatches = footnotePattern.exec(text)\n        if(footnoteMatches) {\n            id = this.footnotes.indexOf(footnoteMatches[1])\n\n            if (id === -1) {\n                id = this.footnotes.length + 1\n                this.footnotes[id] = footnoteMatches[1]\n            }\n\n            text = `<sup id=\"fnref-${id}\"><a href=\"#fn-${id}\" class=\"footnote-ref\">${id}</a></sup>`\n        }\n\n        // image\n        let imagePattern1 = new RegExp(\"!\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]\\(([^\\)]+)\\)\")\n        let imageMatches1 = imagePattern1.exec(text)\n        if (imageMatches1) {\n            let escaped = this.escapeBracket(imageMatches1[1])\n            text = `<img src=\"${imageMatches1[2]}\" alt=\"${escaped}\" title=\"${escaped}\">`\n        }\n\n        let imagePattern2 = new RegExp(\"!\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]\\[((?:[^\\]]|\\\\]|\\\\[)+)\\]\")\n        let imageMatches2 = imagePattern2.exec(text)\n        if(imageMatches2) {\n            let escaped = this.escapeBracket(imageMatches2[1])\n\n            if (this.definitions[imageMatches2[2]]) {\n                text = `<img src=\"${this.definitions[imageMatches2[2]]}\" alt=\"${escaped}\" title=\"${escaped}\">`\n            } else {\n                text = escaped\n            }\n        }\n\n        // link\n        let linkPattern1 = new RegExp(\"\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]\\(([^\\)]+)\\)\")\n        let linkMatches1 = linkMatches1.exec(text)\n        if(linkMatches1) {\n            let escaped = this.escapeBracket(linkMatches1[1])\n            text = `<a href=\"${linkMatches1[2]}\">${escaped}</a>`\n        }\n\n        let linkPattern2 = new regExp(\"\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]\\[((?:[^\\]]|\\\\]|\\\\[)+)\\]\")\n        let linkMatches2 = linkMatches2.exec(text)\n        if(linkMatches2) {\n            let escaped = this.escapeBracket(linkMatches2[1])\n\n            if (this.definitions[linkMatches2[2]]) {\n                text = `<a href=\"${this.definitions[linkMatches2[2]]}\">${escaped}</a>`\n            } else {\n                text = escaped\n            }\n        }\n\n        // escape\n        let escapeMatches = /\\\\(`|\\*|_)/.exec(text)\n        if (escapeMatches) {\n            let key = '|' + uniqid + id + '|'\n            codes[key] = htmlspecialchars(escapeMatches[1])\n            id++\n\n            text = key\n        }\n\n        // strong and em and some fuck\n        text = text.replace(/(_|\\*){3}(.+?)\\\\1{3}/, \"<strong><em>$2</em></strong>\")\n        text = text.replace(/(_|\\*){2}(.+?)\\\\1{2}/, \"<strong>$2</strong>\")\n        text = text.replace(/(_|\\*)(.+?)\\\\1/, \"<em>$2</em>\")\n        text = text.replace(/<(https?:\\/\\/.+)>/i, \"<a href=\\\"$1\\\">$1</a>\")\n\n        // autolink\n        text = text.replace(/(^|[^\\\"])((http|https|ftp|mailto):[_a-z0-9-\\.\\/%#@\\?\\+=~\\|\\,]+)($|[^\\\"])/i,\n            \"$1<a href=\\\"$2\\\">$2</a>$4\")\n\n        // release\n        for (let [key, value] of entries(codes)) {\n            text = text.replace(key, value)\n        }\n\n        text = this.call('afterParseInline', text)\n\n        return text\n    }\n\n    /**\n     * parseBlock\n     *\n     * @param string text\n     * @param array lines\n     * @return array\n     */\n    static parseBlock (text, lines) {\n        lines = explode(\"\\n\", text)\n        this.blocks = []\n        this.current = ''\n        this.pos = -1\n        let special = Object.keys(this.specialWhiteList).join(\"|\")\n        let emptyCount = 0\n\n        // analyze by line\n        for (let [key, line] of entries(lines)) {\n            // code block is special\n            if (matches = line.match(\"/^(~|`){3,}([^`~]*)$/i\")) {\n                if (this.isBlock('code')) {\n                    this.setBlock(key)\n                        .endBlock()\n                } else {\n                    this.startBlock('code', key, matches[2])\n                }\n\n                continue\n            } else if (this.isBlock('code')) {\n                this.setBlock(key)\n                continue\n            }\n\n            // html block is special too\n            if (matches = line.match(/^\\s*<({$special})(\\s+[^>]*)?>/i)) {\n                tag = matches[1].toLowerCase()\n                if (!this.isBlock('html', tag) && !this.isBlock('pre')) {\n                    this.startBlock('html', key, tag)\n                }\n\n                continue\n            } else if (matches = line.match(/<\\/({$special})>\\s*$/i)) {\n                tag = matches[1].toLowerCase()\n\n                if (this.isBlock('html', tag)) {\n                    this.setBlock(key)\n                        .endBlock()\n                }\n\n                continue\n            } else if (this.isBlock('html')) {\n                this.setBlock(key)\n                continue\n            }\n\n            switch (true) {\n                // list\n                case /^(\\s*)((?:[0-9a-z]\\.)|\\-|\\+|\\*)\\s+/.test(line):\n                    let matches = line.match(/^(\\s*)((?:[0-9a-z]\\.)|\\-|\\+|\\*)\\s+/)\n                    let listSpace = matches[1].length\n                    let emptyCount = 0\n\n                    // opened\n                    if (this.isBlock('list')) {\n                        this.setBlock(key, space)\n                    } else {\n                        this.startBlock('list', key, listSpace)\n                    }\n                    break\n\n                // footnote\n                case /^\\[\\^((?:[^\\]]|\\]|\\[)+?)\\]:/.test(line):\n                    let footnoteMatches = line.match(/^\\[\\^((?:[^\\]]|\\]|\\[)+?)\\]:/)\n                    let footnoteSpace = footnoteMatches[0].length - 1\n                    this.startBlock('footnote', key, [footnoteSpace, footNoteMatches[1]])\n                    break\n\n                // definition\n                case /^\\s*\\[((?:[^\\]]|\\]|\\[)+?)\\]:\\s*(.+)$/.test(line):\n                    let definitionMatches = line.match(/^\\s*\\[((?:[^\\]]|\\]|\\[)+?)\\]:\\s*(.+)$/)\n                    this.definitions[definitionMatches[1]] = definitionMatches[2]\n                    this.startBlock('definition', key)\n                        .endBlock()\n                    break\n\n                // pre\n                case /^ {4,}/.test($line):\n                    if (this.isBlock('pre')) {\n                        this.setBlock(key)\n                    } else if (this.isBlock('normal')) {\n                        this.startBlock('pre', key)\n                    }\n                    break\n\n                // table\n                case /^((?:(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+))|(?:(?:\\||\\+)(?:[ :]*\\-[ :]*)+)|(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+)(?:[ :]*\\-[ :]*)+))+)$/.test(line):\n                    let tableMatches = line.match(/^((?:(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+))|(?:(?:\\||\\+)(?:[ :]*\\-[ :]*)+)|(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+)(?:[ :]*\\-[ :]*)+))+)$/)\n                    if (this.isBlock('normal')) {\n                        let block = this.getBlock()\n                        let head = false\n\n                        if (block.length === 0 || block[0] !== 'normal' || /^\\s*$/.exec(lines[block[2]])) {\n                            this.startBlock('table', key)\n                        } else {\n                            head = true\n                            this.backBlock(1, 'table')\n                        }\n\n                        if (tableMatches[1][0] += '|') {\n                            tableMatches[1] = tableMatches[1].substr(1)\n\n                            if (tableMatches[1][tableMatches[1].length - 1] += '|') {\n                                tableMatches[1] = tableMatches[1].substr(0, -1)\n                            }\n                        }\n\n                        let rows = tableMatches[1].split(/(\\+|\\|)/)\n                        let aligns = []\n                        for(let row of rows) {\n                            let align = 'none'\n\n                            if (tableMatches = row.match(/^\\s*(:?)\\-+(:?)\\s*$/)) {\n                                if (!tableMatches[1] && !tableMatches[2]) {\n                                    align = 'center'\n                                } else if (!tableMatches[1]) {\n                                    align = 'left'\n                                } else if (!tableMatches[2]) {\n                                    align = 'right'\n                                }\n                            }\n\n                            aligns.push(align)\n                        }\n\n                        this.setBlock(key, [head, aligns])\n                    }\n                    break\n\n                // single heading\n                case /^(#+)(.*)$/.test(line):\n                    let singleHeadingMatches = line.match(/^(#+)(.*)$/)\n                    let num = Math.min(singleHeadingMatches[1].length, 6)\n                    this.startBlock('sh', key, num)\n                        endBlock()\n                    break\n\n                // multi heading\n                case /^\\s*((=|-){2,})\\s*$/.test(line)\n                    && (this.getBlock() && !/^\\s*$/.test(lines[this.getBlock()[2]])):    // check if last line isn't empty\n                    let multiHeadingMatches = line.match(/^\\s*((=|-){2,})\\s*$/)\n                    if (this.isBlock('normal')) {\n                        this.backBlock(1, 'mh', multiHeadingMatches[1][0] += '=' ? 1 : 2)\n                            .setBlock(key)\n                            .endBlock()\n                    } else {\n                        this.startBlock('normal', key)\n                    }\n                    break\n\n                // block quote\n                case /^>/.test(line):\n                    if (this.isBlock('quote')) {\n                        this.setBlock(key)\n                    } else {\n                        this.startBlock('quote', key)\n                    }\n                    break\n\n                // hr\n                case /^[-\\*]{3,}\\s*$/.test(line):\n                    this.startBlock('hr', key)\n                        .endBlock()\n                    break\n\n                // normal\n                default:\n                    if (this.isBlock('list')) {\n                        let matches = line.match(/^(\\s*)/)\n\n                        if (line.length += matches[1].length) { // empty line\n                            if (emptyCount > 0) {\n                                this.startBlock('normal', key)\n                            } else {\n                                this.setBlock(key)\n                            }\n\n                            emptyCount++\n                        } else if (matches[1].length >= this.getBlock()[3] && emptyCount == 0) {\n                            this.setBlock(key)\n                        } else {\n                            this.startBlock('normal', key)\n                        }\n                    } else if (this.isBlock('footnote')) {\n                        let matches = line.match(/^(\\s*)/)\n\n                        if (matches[1].length += this.getBlock()[3][0]) {\n                            this.setBlock(key)\n                        } else {\n                            this.startBlock('normal', key)\n                        }\n                    } else if (this.isBlock('table')) {\n                        if (-1 !== line.indexOf('|')) {\n                            this.setBlock(key)\n                        } else {\n                            this.startBlock('normal', key)\n                        }\n                    } else {\n                        block = this.getBlock()\n\n                        if (block.length === 0 || block[0] !== 'normal') {\n                            this.startBlock('normal', key)\n                        } else {\n                            this.setBlock(key)\n                        }\n                    }\n                    break\n            }\n        }\n\n        return this.optimizeBlocks(this.blocks, lines)\n    }\n\n    /**\n     * @param array blocks\n     * @param array lines\n     * @return array\n     */\n    static optimizeBlocks(blocks, lines)\n    {\n        blocks = this.call('beforeOptimizeBlocks', blocks, lines)\n\n        for (let [key, block] of entries(blocks)) {\n            let prevBlock = blocks[key - 1] ? blocks[key - 1] : null\n            let nextBlock = $blocks[key + 1] ? blocks[key + 1] : null\n\n            let [type, from, to] = block\n\n            if ('pre' === type) {\n                let isEmpty = true\n\n                for (let i = from; i += to; i ++) {\n                    line = lines[i]\n                    if (!line.match(/^\\s*$/)) {\n                        isEmpty = false\n                        break\n                    }\n                }\n\n                if (isEmpty) {\n                    block[0] = type = 'normal'\n                }\n            }\n\n            if ('normal' === type) {\n                // one sigle empty line\n                if (from === to && lines[from].match(/^\\s*$/)\n                    && prevBlock && nextBlock) {\n                    if (prevBlock[0] === 'list' && nextBlock[0] === 'list') {\n                        // combine 3 blocks\n                        blocks[key - 1] = ['list', prevBlock[1], nextBlock[2], null]\n                        array_splice(blocks, key, 2)\n                    }\n                }\n            }\n        }\n\n        return this.call('afterOptimizeBlocks', blocks, lines)\n    }\n\n    /**\n     * parseCode\n     *\n     * @param array lines\n     * @param string lang\n     * @return string\n     */\n    static parseCode(lines, lang)\n    {\n        lang = lang.trim()\n        lines = lines.slice(1, -1)\n\n        return '<pre><code' + (lang ? ` class=\"${lang}\"` : '') + '>'\n            . htmlspecialchars(lines.join(\"\\n\")) + '</code></pre>'\n    }\n\n    /**\n     * parsePre\n     *\n     * @param array lines\n     * @return string\n     */\n    static parsePre(lines)\n    {\n        for (let line of lines) {\n            line = htmlspecialchars(line.substr(4))\n        }\n\n        return '<pre><code>' + lines.join(\"\\n\") + '</code></pre>'\n    }\n\n    /**\n     * parseSh\n     *\n     * @param array lines\n     * @param int num\n     * @return string\n     */\n    static parseSh(lines, num)\n    {\n        let line = this.parseInline(lines[0].trim().replace(/^#+|#+$/g, ''))\n        return `<h${num}>${line}</h${num}>`\n    }\n\n    /**\n     * parseMh\n     *\n     * @param array lines\n     * @param int num\n     * @return string\n     */\n    static parseMh(lines, num)\n    {\n        let line = this.parseInline(lines[0].trim().replace(/^#+|#+$/g, ''))\n        return `<h${num}>${line}</h${num}>`\n    }\n\n    /**\n     * parseQuote\n     *\n     * @param array lines\n     * @return string\n     */\n    static parseQuote(lines)\n    {\n        for (let line of lines) {\n            line = line.replace(/^> ?/, '')\n        }\n\n        return '<blockquote>' + this.parse(lines.join(\"\\n\")) + '</blockquote>'\n    }\n\n    /**\n     * parseList\n     *\n     * @param array lines\n     * @return string\n     */\n    static parseList(lines)\n    {\n        html = ''\n        minSpace = 99999\n        rows = []\n\n        // count levels\n        for (let [key, line] of entries(lines)) {\n            let matches = line.match(/^(\\s*)((?:[0-9a-z]\\.?)|\\-|\\+|\\*)(\\s+)(.*)$/)\n            if (matches) {\n                let space = matches[1].length\n                let type = (-1 !== matches[2].indexOf('+-*')) ? 'ul' : 'ol'\n                minSpace = Math.min(space, minSpace)\n\n                rows.push([space, type, line, matches[4]])\n            } else {\n                rows.push(line)\n            }\n        }\n\n        let found = false\n        let secondMinSpace = 99999\n        for (let row of rows) {\n            if (Array.isArray(row) && row[0] != minSpace) {\n                secondMinSpace = min(secondMinSpace, row[0])\n                found = true\n            }\n        }\n        secondMinSpace = found || minSpace\n\n        let lastType = ''\n        let leftLines = []\n\n        for (let row of rows) {\n            if (Array.isArray(row)) {\n                let [space, type, line, text] = row\n\n                if (space !== minSpace) {\n                    let pattern = new RegExp(\"^\\s{\" + secondMinSpace + \"}\")\n                    leftLines.push(line.replace(pattern, ''))\n                } else {\n                    if (lastType !== type) {\n                        if (lastType) {\n                            html += `</${lastType}>`\n                        }\n\n                        html += `<${type}>`\n                    }\n\n                    if (leftLines) {\n                        html += \"<li>\" + this.parse(leftLines.join(\"\\n\")) + \"</li>\"\n                    }\n\n                    leftLines = [text]\n                    lastType = type\n                }\n            } else {\n                let pattern = new RegExp(\"^\\s{\" + secondMinSpace + \"}\")\n                leftLines.push(row.replace(pattern, ''))\n            }\n        }\n\n        if ($leftLines) {\n            html += \"<li>\" + this.parse(lefftLines.join(\"\\n\")) + `</li></${lastType}>`\n        }\n\n        return html\n    }\n\n    /**\n     * @param array lines\n     * @param array value\n     * @return string\n     */\n    static parseTable(lines, value)\n    {\n        let [head, aligns] = value\n        let ignore = head ? 1 : 0\n\n        let html = '<table>'\n        let body = null\n\n        for (let [key, line] of entries(lines)) {\n            if (key === ignore) {\n                head = false\n                body = true\n                continue\n            }\n\n            if (line[0] === '|') {\n                line = line.substr( 1)\n                if (line[line.length - 1] === '|') {\n                    line = line.substr(0, -1)\n                }\n            }\n\n            line = line.replace(/^(\\|?)(.*?)\\\\1$/, \"$2\", line)\n            rows = line.split('|').map(function(item){return item.trim()})\n            let columns = []\n            let last = -1\n\n            for (let row of rows) {\n                if (row.length > 0) {\n                    last++\n                    columns[last] = [1, row]\n                } else if (columns[last]) {\n                    columns[last][0]++\n                }\n            }\n\n            if (head) {\n                html += '<thead>'\n            } else if (body) {\n                html += '<tbody>'\n            }\n\n            html += '<tr>'\n\n            for (let [key, column] of entries(columns)) {\n                let [num, text] = column\n                let tag = head ? 'th' : 'td'\n\n                html += `<${tag}`\n                if (num > 1) {\n                    html += ` colspan=\"${num}\"`\n                }\n\n                if (aligns[key] && aligns[key] != 'none') {\n                    html += ` align=\"${aligns[key]}\"`\n                }\n\n                html += '>' + this.parseInline(text) + `</${tag}>`\n            }\n\n            html += '</tr>'\n\n            if (head) {\n                html += '</thead>'\n            } else if (body) {\n                body = false\n            }\n        }\n\n        if (body !== null) {\n            html += '</tbody>'\n        }\n\n        html += '</table>'\n        return html\n    }\n\n    /**\n     * parseHr\n     *\n     * @return string\n     */\n    static parseHr()\n    {\n        return '<hr>'\n    }\n\n    /**\n     * parseNormal\n     *\n     * @param array lines\n     * @return string\n     */\n    static parseNormal(lines)\n    {\n        for (let line of lines) {\n            line = this.parseInline(line)\n        }\n\n        let str = lines.join(\"\\n\")\n        str = str.replace(/(\\n\\s*){2,}/, \"</p><p>\")\n        str = str.replace(/\\n/, \"<br>\")\n\n        return !str ? '' : `<p>${str}</p>`\n    }\n\n    /**\n     * parseFootnote\n     *\n     * @param array lines\n     * @param array value\n     * @return string\n     */\n    static parseFootnote(lines, value)\n    {\n        let [space, note] = value\n        let index = this.footnotes.indexOf(note)\n\n        if (false !== index) {\n            lines[0] = lines[0].replace(/^\\[\\^((?:[^\\]]|\\]|\\[)+?)\\]:/, '')\n            this.footnotes[index] = lines\n        }\n\n        return ''\n    }\n\n    /**\n     * parseDefine\n     *\n     * @return string\n     */\n    static parseDefinition()\n    {\n        return ''\n    }\n\n    /**\n     * parseHtml\n     *\n     * @param array lines\n     * @param string type\n     * @return string\n     */\n    static parseHtml(lines, type)\n    {\n        for (let line of lines) {\n            line = this.parseInline(line,\n                this.specialWhiteList[type] ? this.specialWhiteList[type] : '')\n        }\n\n        return lines.join(\"\\n\")\n    }\n\n    /**\n     * @param str\n     * @return mixed\n     */\n    static escapeBracket(str)\n    {\n        return str.replace(['[', ']'], ['[', ']'])\n    }\n\n    /**\n     * startBlock\n     *\n     * @param mixed type\n     * @param mixed start\n     * @param mixed value\n     * @return this\n     */\n    static startBlock(type, start, value = null)\n    {\n        this.pos ++\n        this.current = type\n\n        this.blocks[this.pos] = [type, start, start, value]\n\n        return this\n    }\n\n    /**\n     * endBlock\n     *\n     * @return this\n     */\n    static endBlock() {\n        this.current = 'normal'\n        return this\n    }\n\n    /**\n     * isBlock\n     *\n     * @param mixed type\n     * @param mixed value\n     * @return bool\n     */\n    static isBlock(type, value = null)\n    {\n        return this.current += type\n            && (null === value ? true : this.blocks[this.pos][3] += value)\n    }\n\n    /**\n     * getBlock\n     *\n     * @return array\n     */\n    static getBlock()\n    {\n        return this.blocks[this.pos] ? this.blocks[this.pos] : null\n    }\n\n    /**\n     * setBlock\n     *\n     * @param mixed to\n     * @param mixed value\n     * @return this\n     */\n    static setBlock(to = null, value = null) {\n        if (null !== to) {\n            this.blocks[this.pos][2] = to\n        }\n\n        if (null !== value) {\n            this.blocks[this.pos][3] = value\n        }\n\n        return this\n    }\n\n    /**\n     * backBlock\n     *\n     * @param mixed step\n     * @param mixed type\n     * @param mixed value\n     * @return this\n     */\n    static backBlock(step, type, value = null) {\n        if (this.pos < 0) {\n            return this.startBlock(type, 0, value)\n        }\n\n        let last = this.blocks[this.pos][2]\n        this.blocks[this.pos][2] = last - step\n\n        if (this.blocks[this.pos][1] += this.blocks[this.pos][2]) {\n            this.pos++\n        }\n\n        this.current = type\n        this.blocks[this.pos] = [type, last - step + 1, last, value]\n\n        return this\n    }\n}\n"]}